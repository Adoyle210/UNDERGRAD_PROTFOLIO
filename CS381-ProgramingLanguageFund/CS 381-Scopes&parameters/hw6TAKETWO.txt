CS 381: Homework 6
By  Alexis Doyle 

--------------------------------------------------------------------------------------------------------
Problem 1: Runtime Stack
Consider the following block. Assume static scoping and call-by-value parameter passing.
1: {    int x;
2:    int z;
3:    z := 4;                                
4:    { int f(int x){ 
5:        if x = 0 then {
6:            z := 1 }
7:        else {
8:            z := f(x-1) * z+2};           
9:        return z;
10:      };
11:      x := f(3);                         
12:    };
13: }
Demonstrate the computations that take place during the evaluation of this block, that is, give a
sequence of lines each showing the complete runtime stack with all activation records after each
statement or function call. For recursive calls use one stack onto which a new activation record is
pushed on for each recursive function call.

Answer: 
the scope:
[]                                                                              nothing 
[(x:?)]                                                                         pushing x
[(z:?),(x:?)]                                                                   pushing z
[(z:4),(x:?)]                                                                   setting z = 1 from z = ?
[f{},(z:4),(x:?)]                                                               pushing f function
[(x'f(3):4), f{},(z:4),(x:?)]                                                   calling f(3) 
[(x''f(2):1),(x'f(3):4), f{},(z:4),(x:?)]                                       recursuive call from f(3) into f(2)
[(x'''f(1):0),(x''f(2):1),(x'f(3):4), f{},(z:1),(x:?)]                          recursuive call from f(3) from f(2) into f(1)
[(x''''f(0):0),(x'''f(1):0),(x''f(2):1),(x'f(3):4), f{},(z:1),(x:?)]            recursuive call of f(0) sets z to 1
[(x'''f(1):0),(x''f(2):1),(x'f(3):4), f{},(z:1),(x:?)]                          returns f(1) sets y = f(0) * 1 + 1 = 2 
[(x''f(2):1),(x'f(3):4), f{},(z:1),(x:?)]                                       returns f(2) sets y = f(1) * 1 + 1 = 3
[(x'f(3):4), f{},(z:1),(x:?)]                                                   return  f(3) sets y  = f(2) * 1 + 1 = 4
[f{},(z:1),(x:4)]                                                               return from f(3) and sets x as the return value of 4

alternative break down of calling f(3): 
x != 0 so z := f(x-1) * z+2 (line 8)
    = f(3-1) * z+2      (this is f(2))
    = f(2-1) * z+2      (this is f(1))
    = f(1-1) * z+2      (this is f(0))
    f(0) so z = 1 is returning 

    = f(0) * z+2    ->     1 * 1 + 1 = 2
    = f(1) * z+2    ->     2 * 1 + 1 = 3
    = f(2) * z+2    ->     3 * 1 + 1 = 4
    so x = 4

--------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------
Problem 2: Static and Dynamic Scope
Consider the following block. Assume call-by-value parameter passing.
1: {   int x;
2:    int y;
3:    int z;
4:    x := 4;                               
5:    y := 6;                               
6:    {   int f(int y) {return x * y };
7:        int y;
8:       y := 13;                           
9:        { int g(int x) {return f(y) };
10:            {   int y;
11:                y := 14;                 
12:                z := g(3);                
13:            };
14:        };
15:    };
16: }

a) Draw the runtime stack after each line executes under static scoping. What value assigned to z in line 12?
b) Draw the runtime stack after each line executes under dynamic scoping. What value assigned to z in line 12?

The scope:                                                            Stack View:      
[]                                                                      nothing
[(x:?)]                                                                 pushing x 
[(y:?),(x:?)]                                                           pushing y 
[(z:?),(y:?),(x:?)]                                                     pushing z 
[(z:?),(y:?),(x:4)]                                                     setting x = 4 from x = ?
[(z:?),(y:6),(x:4)]                                                     setting y = 6 from y = ? 
[f{},(z:?),(y:6),(x:4)]                                                 pushing f function
[(y':?),f{},(z:?),(y:6),(x:4)]                                          pushing y' (new scope y) 
[(y':13),f{},(z:?),(y:6),(x:4)]                                         setting y' = 13 from y' = ?
[g{},(y':13),f{},(z:?),(y:6),(x:4)]                                     pushing g function
[(y'':?),g{},(y':13),f{},(z:?),(y:6),(x:4)]                             setting y'' (another new scope y) 
[(y'':14),g{},(y':13),f{},(z:?),(y:6),(x:4)]                            setting y'' = 14 from y'' = ?
[(x'g(3):2),(y'':14),g{},(y':13),f{},(z:?),(y:6),(x:4)]                 calling g(3), pushing x from scope g(3)
[(y'f(14):14),(x'g(3):2),(y'':14),g{},(y':13),f{},(z:?),(y:6),(x:4)]    calling f(14) pushing y from scope f(14)
[(y'':14),g{},(y':13),f{},(z:?),(y:6),(x:4)]                            return from g(3){f(14){ return ...}} and set z = ? to z = (static: ) (dynammic: )

Answer A:
static scoping z = 4 * 6 = 24

Answer B:
dynamic scoping y = 3 * 14 = 42

--------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------
Problem 3: Parameter Passing 
Consider the following block. Assume dynamic scoping.
1; {   int y;
2:    int z;
3:   y := 6;                       7
4:    {   int f(int a){
5:            y := a + 1;
6:            return (y+a)
7:        };
8:        int g(int x){
9:            y := f(x+1)+2;       1
10:            z := f(x-y+2);      3
11:            return (z+1)
12:        }
13:        z := g(y*2);
14:    };
15: }

a) Draw the runtime stack after each line executes given that both parameters a and x are passed
using Call-by-Name. What are the values of y and z after line 13 executes?

b) Draw the runtime stack after each line executes given that both parameters a and x are passed
using Call-by-Need. What are the values of y and z after line 13 executes?

Answer A:
the scope:
[]                                                            nothing
[(y:?)]                                                       pushing y
[(z:?),(y:?)]                                                 pushing z
[(z:?),(y:6)]                                                 set y to 6 from ?
[f{},(z:?),(y:6)]                                             pushing function f
[g{},f{},(z:?),(y:6)]                                         pushing function g
[g{},f{},(z:g(y*2)),(y:6)]                  
[(x'g(y*2):y*2), g{},f{},(z:g(y*2)),(y:6)]                    calling g and here x = 12
[(y': f(x+1)+1),(x'g(12):z+1), g{},f{},(z:g(12)),(y:6)]         new scope which is 'y = 30 and x is 32 now 
[(z':f(x-y+3)),(y': 30),(x'g(12):z+1), g{},f{},(z:g(12)),(y:6)] new scope z and x is 32 and 'y is 48 now
[g{},f{},(z:-18),(y:6)]                                       return g(12) z = 31

so Z = 31 and y = 6

break down:
z = g(6*2) -> g(12) (line 13)
(in function g: )
x = y + 2 



Answer B:
The scope:
[]                                                        nothing
[(y:?)]                                                   pushing y
[(z:?),(y:?)]                                             pushing z
[(z:?),(y:6)]                                             set y to 6 from ?
[f{},(z:?),(y:6)]                                         pushing function f
[g{},f{},(z:?),(y:6)]                                     pushing function g
[g{},f{},(z:g(y*2)),(y:6)]                  
[(x'g(14):12), g{},f{},(z:g(14)),(y:6)]                   calling g 
[(y': ),(x'g(12):12), g{},f{},(z:g(12)),(y:6)]            new scope y = 15
[(z':-),(y': ),(x'g(12):12), g{},f{},(z:g(12)),(y:6)]    new scope z = -4
[g{},f{},(z:-4),(y:7)]                                   return g() andset z to -4

so z = -4 and y = 15

break down:
z = g(6*2) -> g(12) (line 13)

--------------------------------------------------------------------------------------------------------



